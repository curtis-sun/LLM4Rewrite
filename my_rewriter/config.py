from llama_index.core import Settings
from llama_index.llms.openai import OpenAI

CACHE_PATH = 'cache'
CASE_RULES_PATH = 'stackoverflow-rewrite-rules-query-optimization.jsonl'

def init_llms(model_type: str) -> dict[str, str]:
    if 'gpt3' in model_type:
        Settings.llm = OpenAI(
            model="gpt-3.5-turbo-0125"
        )
        from my_rewriter.prompts_gpt3 import GEN_CASE_REWRITE_SYS_PROMPT, GEN_CASE_REWRITE_USER_PROMPT, SELECT_CASE_RULE_SYS_PROMPT, SELECT_CASE_RULE_USER_PROMPT, CLUSTER_REWRITE_SYS_PROMPT, CLUSTER_REWRITE_USER_PROMPT, SUMMARIZE_REWRITE_SYS_PROMPT, SUMMARIZE_REWRITE_USER_PROMPT, SELECT_RULES_SYS_PROMPT, SELECT_RULES_USER_PROMPT, ARRANGE_RULE_SETS_SYS_PROMPT, ARRANGE_RULE_SETS_USER_PROMPT, ARRANGE_RULES_SYS_PROMPT, ARRANGE_RULES_USER_PROMPT, REARRANGE_RULES_SYS_PROMPT, REARRANGE_RULES_USER_PROMPT, SELECT_ARRANGE_RULES_SYS_PROMPT, SELECT_ARRANGE_RULES_USER_PROMPT, RAG_SELECT_ARRANGE_RULES_SYS_PROMPT, RAG_SELECT_ARRANGE_RULES_USER_PROMPT
    else:
        Settings.llm = OpenAI(
            model="gpt-4o"
        )
        from my_rewriter.prompts import GEN_CASE_REWRITE_SYS_PROMPT, GEN_CASE_REWRITE_USER_PROMPT, SELECT_CASE_RULE_SYS_PROMPT, SELECT_CASE_RULE_USER_PROMPT, CLUSTER_REWRITE_SYS_PROMPT, CLUSTER_REWRITE_USER_PROMPT, SUMMARIZE_REWRITE_SYS_PROMPT, SUMMARIZE_REWRITE_USER_PROMPT, SELECT_RULES_SYS_PROMPT, SELECT_RULES_USER_PROMPT, ARRANGE_RULE_SETS_SYS_PROMPT, ARRANGE_RULE_SETS_USER_PROMPT, ARRANGE_RULES_SYS_PROMPT, ARRANGE_RULES_USER_PROMPT, REARRANGE_RULES_SYS_PROMPT, REARRANGE_RULES_USER_PROMPT, SELECT_ARRANGE_RULES_SYS_PROMPT, SELECT_ARRANGE_RULES_USER_PROMPT, RAG_SELECT_ARRANGE_RULES_SYS_PROMPT, RAG_SELECT_ARRANGE_RULES_USER_PROMPT
    return {
        'GEN_CASE_REWRITE_SYS_PROMPT': GEN_CASE_REWRITE_SYS_PROMPT,
        'GEN_CASE_REWRITE_USER_PROMPT': GEN_CASE_REWRITE_USER_PROMPT,
        'SELECT_CASE_RULE_SYS_PROMPT': SELECT_CASE_RULE_SYS_PROMPT,
        'SELECT_CASE_RULE_USER_PROMPT': SELECT_CASE_RULE_USER_PROMPT,
        'CLUSTER_REWRITE_SYS_PROMPT': CLUSTER_REWRITE_SYS_PROMPT,
        'CLUSTER_REWRITE_USER_PROMPT': CLUSTER_REWRITE_USER_PROMPT,
        'SUMMARIZE_REWRITE_SYS_PROMPT': SUMMARIZE_REWRITE_SYS_PROMPT,
        'SUMMARIZE_REWRITE_USER_PROMPT': SUMMARIZE_REWRITE_USER_PROMPT,
        'SELECT_RULES_SYS_PROMPT': SELECT_RULES_SYS_PROMPT,
        'SELECT_RULES_USER_PROMPT': SELECT_RULES_USER_PROMPT,
        'ARRANGE_RULE_SETS_SYS_PROMPT': ARRANGE_RULE_SETS_SYS_PROMPT,
        'ARRANGE_RULE_SETS_USER_PROMPT': ARRANGE_RULE_SETS_USER_PROMPT,
        'ARRANGE_RULES_SYS_PROMPT': ARRANGE_RULES_SYS_PROMPT,
        'ARRANGE_RULES_USER_PROMPT': ARRANGE_RULES_USER_PROMPT,
        'REARRANGE_RULES_SYS_PROMPT': REARRANGE_RULES_SYS_PROMPT,
        'REARRANGE_RULES_USER_PROMPT': REARRANGE_RULES_USER_PROMPT,
        'SELECT_ARRANGE_RULES_SYS_PROMPT': SELECT_ARRANGE_RULES_SYS_PROMPT,
        'SELECT_ARRANGE_RULES_USER_PROMPT': SELECT_ARRANGE_RULES_USER_PROMPT,
        'RAG_SELECT_ARRANGE_RULES_SYS_PROMPT': RAG_SELECT_ARRANGE_RULES_SYS_PROMPT,
        'RAG_SELECT_ARRANGE_RULES_USER_PROMPT': RAG_SELECT_ARRANGE_RULES_USER_PROMPT
    }

def init_db_config(database: str) -> dict[str, str]:
    return {
        'host': '',
        'port': 5432,
        'user': '',
        'password': '',
        'dbname': database,
        'db': 'postgresql'
    }